{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Location": {
				"properties": {
					"country": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					}
				},
				"required": [
					"country",
					"city",
					"address"
				],
				"type": "object",
				"description": "Model Location"
			},
			"User": {
				"properties": {
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"location": {
						"items": {
							"$ref": "#/components/schemas/Location"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"dateOfBirth": {
						"type": "string",
						"format": "date-time"
					},
					"email": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"updatedAt",
					"createdAt",
					"location",
					"name",
					"dateOfBirth",
					"email",
					"id"
				],
				"type": "object",
				"description": "Model User"
			},
			"UsersResponse": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"users": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					}
				},
				"required": [
					"users"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserResponse": {
				"properties": {
					"user": {
						"allOf": [
							{
								"$ref": "#/components/schemas/User"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"user"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "node-typescript-skeleton",
		"version": "1.0.0",
		"description": "Node project skeleton using Typescript, ESLint, TS-Standard and Nodemon",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Brando Vidal"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "email",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "The `createUser` function takes in a `User` object and returns a promise of a User object",
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- User",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User",
								"description": "- User"
							}
						}
					}
				}
			}
		},
		"/users/user": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "A promise of a UserResponse object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					}
				},
				"description": "The `getUser` function takes in a `name` and `email` query parameter and returns a `UserResponse`\nobject",
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the name of the user.",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The email of the user to get.",
						"in": "query",
						"name": "email",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users/{id}": {
			"get": {
				"operationId": "GetUserId",
				"responses": {
					"200": {
						"description": "The user object",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/User"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "The `getUserId` function takes in a `id` path parameter and returns a promise of a User object",
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the path parameter. It's the id of the user we want to get.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "The updated user",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "The `updateUser` function takes in a `id` path parameter and a `User` object and returns a promise of a User object",
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the id of the user we want to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- This is the body of the request. It's the data that the user is\nsending to the server.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User",
								"description": "- This is the body of the request. It's the data that the user is\nsending to the server."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "The user that was deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "The `deleteUser` function takes in a `id` path parameter and returns a promise of a User object",
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the path parameter. It's the id of the user we want to\ndelete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}