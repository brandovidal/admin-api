{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Tag": {
				"type": "string",
				"enum": [
					"NodeJS",
					"Java",
					"React",
					"GraphQL",
					"Spring",
					"Typescript",
					"Express",
					"Docker",
					"Jest",
					"Jenkins",
					"AWS"
				],
				"description": "Enums"
			},
			"Comment": {
				"properties": {
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"voteCount": {
						"type": "number",
						"format": "double"
					},
					"text": {
						"type": "string"
					}
				},
				"required": [
					"updatedAt",
					"createdAt",
					"voteCount",
					"text"
				],
				"type": "object",
				"description": "Model Comment"
			},
			"Post": {
				"properties": {
					"authorId": {
						"type": "string"
					},
					"comments": {
						"items": {
							"$ref": "#/components/schemas/Comment"
						},
						"type": "array"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"tags": {
						"items": {
							"$ref": "#/components/schemas/Tag"
						},
						"type": "array"
					},
					"isPublished": {
						"type": "boolean"
					},
					"viewCount": {
						"type": "number",
						"format": "double"
					},
					"content": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"authorId",
					"comments",
					"updatedAt",
					"createdAt",
					"tags",
					"isPublished",
					"viewCount",
					"content",
					"title",
					"id"
				],
				"type": "object",
				"description": "Model Post"
			},
			"PostsResponse": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"posts": {
						"items": {
							"$ref": "#/components/schemas/Post"
						},
						"type": "array"
					}
				},
				"required": [
					"posts"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InternalErrorJSON": {
				"properties": {
					"status": {
						"type": "number",
						"enum": [
							500
						],
						"nullable": false
					},
					"code": {
						"type": "string",
						"enum": [
							"internal_server_error"
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"Internal server error"
						],
						"nullable": false
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"status",
					"code",
					"message",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ForbiddenErrorJSON": {
				"properties": {
					"status": {
						"type": "number",
						"enum": [
							403
						],
						"nullable": false
					},
					"code": {
						"type": "string",
						"enum": [
							"internal_server_error"
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"Internal server error"
						],
						"nullable": false
					},
					"error": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					}
				},
				"required": [
					"status",
					"code",
					"message",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostResponse": {
				"properties": {
					"post": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Post"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"post"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PostSchema": {
				"properties": {
					"authorId": {
						"type": "string"
					},
					"comments": {
						"items": {
							"$ref": "#/components/schemas/Comment"
						},
						"type": "array"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"tags": {
						"items": {
							"$ref": "#/components/schemas/Tag"
						},
						"type": "array"
					},
					"isPublished": {
						"type": "boolean"
					},
					"viewCount": {
						"type": "number",
						"format": "double"
					},
					"content": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"authorId",
					"comments",
					"updatedAt",
					"createdAt",
					"tags",
					"isPublished",
					"viewCount",
					"content",
					"title",
					"id"
				],
				"type": "object",
				"description": "Model Post"
			},
			"ValidateErrorJSON": {
				"properties": {
					"status": {
						"type": "number",
						"enum": [
							400
						],
						"nullable": false
					},
					"code": {
						"type": "string",
						"enum": [
							"validation_error"
						],
						"nullable": false
					},
					"message": {
						"type": "string",
						"enum": [
							"User validation with erros"
						],
						"nullable": false
					},
					"error": {
						"items": {
							"properties": {
								"message": {
									"type": "string"
								},
								"path": {
									"type": "string"
								}
							},
							"required": [
								"message",
								"path"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"code",
					"message",
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Location": {
				"properties": {
					"country": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					}
				},
				"required": [
					"country",
					"city",
					"address"
				],
				"type": "object",
				"description": "Model Location"
			},
			"User": {
				"properties": {
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"location": {
						"items": {
							"$ref": "#/components/schemas/Location"
						},
						"type": "array"
					},
					"name": {
						"type": "string"
					},
					"dateOfBirth": {
						"type": "string",
						"format": "date-time"
					},
					"email": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"updatedAt",
					"createdAt",
					"location",
					"name",
					"dateOfBirth",
					"email",
					"id"
				],
				"type": "object",
				"description": "Model User"
			},
			"UsersResponse": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"total": {
						"type": "number",
						"format": "double"
					},
					"users": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					}
				},
				"required": [
					"users"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserResponse": {
				"properties": {
					"user": {
						"allOf": [
							{
								"$ref": "#/components/schemas/User"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"user"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "node-prisma-mongo-skeleton",
		"version": "1.0.0",
		"description": "Node project skeleton using Typescript, ESLint, TS-Standard and Nodemon",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Brando Vidal"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/posts": {
			"get": {
				"operationId": "GetPosts",
				"responses": {
					"200": {
						"description": "The return type is PostsResponse.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostsResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ForbiddenErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `getPosts` function takes in a `title`, `content`, `page` and `size` query parameter and returns a `PostsResponse`",
				"tags": [
					"Post"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string",
						"in": "query",
						"name": "title",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- string",
						"in": "query",
						"name": "content",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The page number of the results to return.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The number of items to return per page.",
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "CreatePost",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostSchema"
								}
							}
						}
					},
					"400": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `createPost` function takes in a `Post` object and returns a promise of a Post object",
				"tags": [
					"Post"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- Post",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PostSchema",
								"description": "- Post"
							}
						}
					}
				}
			}
		},
		"/posts/post": {
			"get": {
				"operationId": "GetPost",
				"responses": {
					"200": {
						"description": "A promise of a PostResponse object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ForbiddenErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `getPost` function takes in a `title` and `content` query parameter and returns a `PostResponse`\nobject",
				"tags": [
					"Post"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the title of the post.",
						"in": "query",
						"name": "title",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The content of the post to get.",
						"in": "query",
						"name": "content",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/posts/{id}": {
			"get": {
				"operationId": "GetPostId",
				"responses": {
					"200": {
						"description": "The post object",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/PostSchema"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ForbiddenErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `getPostId` function takes in a `id` path parameter and returns a promise of a Post object",
				"tags": [
					"Post"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the path parameter. It's the id of the post we want to get.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdatePost",
				"responses": {
					"200": {
						"description": "The updated post",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostSchema"
								}
							}
						}
					},
					"400": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `updatePost` function takes in a `id` path parameter and a `Post` object and returns a promise of a Post object",
				"tags": [
					"Post"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the id of the post we want to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- This is the body of the request. It's the data that the post is\nsending to the server.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PostSchema",
								"description": "- This is the body of the request. It's the data that the post is\nsending to the server."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeletePost",
				"responses": {
					"200": {
						"description": "The post that was deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostSchema"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `deletePost` function takes in a `id` path parameter and returns a promise of a Post object",
				"tags": [
					"Post"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the path parameter. It's the id of the post we want to\ndelete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users": {
			"get": {
				"operationId": "getUsers",
				"responses": {
					"200": {
						"description": "The return type is UsersResponse.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ForbiddenErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `getUsers` function takes in a `name`, `email`, `page` and `size` query parameter and returns a `UsersResponse`",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- string",
						"in": "query",
						"name": "email",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The page number of the results to return.",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 1,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The number of items to return per page.",
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `createUser` function takes in a `User` object and returns a promise of a User object",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- User",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User",
								"description": "- User"
							}
						}
					}
				}
			}
		},
		"/users/user": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "A promise of a UserResponse object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ForbiddenErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `getUser` function takes in a `name` and `email` query parameter and returns a `UserResponse`\nobject",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the name of the user.",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The email of the user to get.",
						"in": "query",
						"name": "email",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users/{id}": {
			"get": {
				"operationId": "GetUserId",
				"responses": {
					"200": {
						"description": "The user object",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/User"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ForbiddenErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `getUserId` function takes in a `id` path parameter and returns a promise of a User object",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the path parameter. It's the id of the user we want to get.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "The updated user",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `updateUser` function takes in a `id` path parameter and a `User` object and returns a promise of a User object",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the id of the user we want to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "- This is the body of the request. It's the data that the user is\nsending to the server.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User",
								"description": "- This is the body of the request. It's the data that the user is\nsending to the server."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "The user that was deleted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalErrorJSON"
								}
							}
						}
					}
				},
				"description": "The `deleteUser` function takes in a `id` path parameter and returns a promise of a User object",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [
					{
						"description": "- string - This is the path parameter. It's the id of the user we want to\ndelete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "User",
			"description": "Operations of users"
		},
		{
			"name": "Post",
			"description": "Operations of users"
		}
	]
}