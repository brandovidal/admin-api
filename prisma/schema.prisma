// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserStatusEnumType {
  active
  inactive
  deleted
}

enum UserRoleEnumType {
  user
  admin
}

enum MartketingMediaEnumType {
  email
  facebook
  recomendation
  website
  google
  other
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  username String @unique
  name     String

  email    String   @unique
  photo    String?  @default("default.png")
  verified Boolean? @default(false)

  password String
  role     UserRoleEnumType?   @default(user)
  status   UserStatusEnumType? @default(active)

  verificationCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, email, verificationCode])
  @@map("users")
}

model Student {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  lastname String
  birthday DateTime?
  dni      Int?
  email    String   @unique

  ruc          Int?
  businessName String?
  address      String?

  country           String?
  phoneCode         String?
  phone             Int?
  phoneWithFormat   String?
  ladline           Int?
  ladlineWithFormat String?

  postgraduateTraining Boolean? @default(false)
  graduateTraining     Boolean? @default(false)
  bachelorTraining     Boolean? @default(false)
  studentTraining      Boolean? @default(false)

  studyCenter  String?
  workplace    String?
  workPosition String?
  workAddress  String?

  status Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  enrollment  Enrollment[]  @relation("studentEnrollments")
  certificate Certificate[] @relation("studentCertificates")
  membership  Membership[]  @relation("studentMemberships")
  payment     Payment[]     @relation("studentPayments")

  // @@unique([email])
  @@map("students")
}

model Enrollment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  startDate DateTime? @default(now())
  endDate   DateTime?

  presentialModality     Boolean? @default(false)
  semiPresentialModality Boolean? @default(false)
  virtualModality        Boolean? @default(false)

  enableMarketingAds Boolean?                  @default(false)
  marketingAds       MartketingMediaEnumType[]
  marketingMedia     String?
  marketingEmail     String?

  enrolled Boolean? @default(false)
  status   Boolean? @default(true)

  amount   Float? @default(0.00)
  discount Float? @default(0.00)
  total    Float? @default(0.00)

  student   Student? @relation("studentEnrollments", fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String?  @db.ObjectId

  program   Program? @relation("programEnrollments", fields: [programId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  programId String?  @db.ObjectId

  payment Payment[] @relation("enrollmentPayments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([studentId])
  @@map("enrollments")
}

model Course {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  code String

  startDate DateTime?
  endDate   DateTime?

  uniqueProgram Boolean? @default(false)
  status        Boolean? @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  program Program[] @relation("programCourses")

  @@unique([code])
  @@map("courses")
}

model Program {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  code String

  startDate DateTime?
  endDate   DateTime?

  amount   Float @default(0.00)
  discount Float @default(0.00)
  total    Float @default(0.00)

  status       Boolean? @default(true)
  observations String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  enrollment  Enrollment[]  @relation("programEnrollments")
  Certificate Certificate[] @relation("certificatePrograms")

  course   Course? @relation("programCourses", fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String? @db.ObjectId

  @@unique([code, courseId])
  @@map("programs")
}

model Country {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String
  otherName String
  iso2      String
  iso3      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  status Boolean? @default(true)

  @@unique([name, iso2, iso3])
  @@map("countries")
}

model Certificate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  url         String
  dateOfIssue DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  status Boolean? @default(true)

  program   Program? @relation("certificatePrograms", fields: [programId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  programId String   @db.ObjectId

  student   Student? @relation("studentCertificates", fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String   @db.ObjectId

  @@unique([url])
  @@map("certificates")
}

model Membership {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  startDate DateTime?
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  status Boolean? @default(true)

  student   Student? @relation("studentMemberships", fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String   @db.ObjectId

  @@map("memberships")
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  voucher String?
  amount  Float

  paymentMethod    String
  paymentDate      DateTime
  paymentCondition String?
  placeOfPayment   String?
  observations     String?

  enrollment   Enrollment? @relation("enrollmentPayments", fields: [enrollmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  enrollmentId String      @db.ObjectId

  student   Student? @relation("studentPayments", fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String   @db.ObjectId

  status Boolean? @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([voucher])
  @@map("payments")
}
