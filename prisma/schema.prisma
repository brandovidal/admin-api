// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output        = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RoleEnumType {
  user
  admin
}

enum Tag {
  NodeJS
  Java
  React
  GraphQL
  Spring
  Typescript
  Express
  Docker
  Jest
  Jenkins
  AWS
}

type Comment {
  text      String
  voteCount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  username String @unique
  name     String

  email    String   @unique
  photo    String?  @default("default.png")
  verified Boolean? @default(false)

  password String
  role     RoleEnumType? @default(user)

  verificationCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, email, verificationCode])
  @@map("users")
}

model Student {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  lastname           String
  birthday           DateTime
  phone              Int
  phoneWithFormat    String
  dni                Int
  email              String
  ruc                Int
  country            String
  businessName       String
  ladline            Int
  ladlineWithFormat  String
  address            String
  postgradoTraining  Boolean?
  qualifiedTraining  Boolean?
  highSchoolTraining Boolean?
  studentTraining    Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  // comments          Comment[]
  // author            User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  // authorId          String    @db.ObjectId

  // @@index([authorId])
  @@map("posts")
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  code  String
  name  String
  model Model

  @@index([code])
  @@map("categories")
}

type Model {
  name        String
  description String
}
